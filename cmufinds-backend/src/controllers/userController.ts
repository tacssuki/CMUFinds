// src/controllers/userController.ts
import { Request, Response } from "express";
import UserService from "../services/userService";
import { Role } from "@prisma/client"; // Assuming Role enum is generated by Prisma

class UserController {
  public async getProfile(req: Request, res: Response) {
    // Authorization: Users should generally only get their own profile 
    // unless an admin needs to view it (which might be a separate admin route)
    const userId = req.user!.userId;
    // Optional: If this needs to support admins getting other profiles:
    // const targetUserId = req.params.userId || req.user!.userId; 
    // if (req.user!.userId !== targetUserId && !req.user!.roles?.includes(Role.ADMIN)) {
    //   return res.status(403).json({ message: 'Forbidden: Access denied' });
    // }
    // const result = await UserService.getProfile(targetUserId);
    const result = await UserService.getProfile(userId); 
    return res.status(result.status).json(result);
  }

  public async updateProfile(req: Request, res: Response) {
    // Authorization: User must be themselves or an admin to update profile
    const userIdToUpdate = req.params.id; // Assuming ID comes from URL param like /users/:id/profile
    const requestingUserId = req.user!.userId;
    const requestingUserRoles = req.user!.roles || [];
    
    if (!userIdToUpdate) {
      // If no ID in params, assume user is updating their own profile via a dedicated route like /profile
      const updates = req.body; 

      // --- Add this: Prevent email updates through this endpoint ---
      if (updates.email) {
        delete updates.email; 
        // Optionally log this attempt or inform the user, though the frontend shouldn't send it.
        console.log(`Attempt to update email for user ${requestingUserId} blocked.`);
      }
      // --- End addition ---

      const result = await UserService.updateProfile(requestingUserId, updates);
      return res.status(result.status).json(result);
    }

    // If ID is present, check permissions
    if (requestingUserId !== userIdToUpdate && !requestingUserRoles.includes(Role.ADMIN)) {
      return res.status(403).json({ message: 'Forbidden: You do not have permission to update this profile.' });
    }

    const updates = req.body; // already validated by Zod

    // --- Add this: Prevent email updates through this endpoint ---
    if (updates.email) {
      delete updates.email;
      // Optionally log this attempt
      console.log(`Attempt to update email for user ${userIdToUpdate} by admin ${requestingUserId} blocked.`);
    }
    // --- End addition ---

    const result = await UserService.updateProfile(userIdToUpdate, updates);
    return res.status(result.status).json(result);
  }

  public async searchUsers(req: Request, res: Response) {
    try {
      const { query, page, limit } = req.query;
      const pageNum = parseInt(page as string) || 1;
      const limitNum = parseInt(limit as string) || 10;
      
      const result = await UserService.searchUsers(
        query as string, 
        pageNum, 
        limitNum
      );
      
      return res.status(result.status).json(result);
    } catch (error) {
      console.error("[SEARCH USERS ERROR]", error);
      return res.status(500).json({ error: "Internal Server Error" });
    }
  }
}

export default new UserController();
